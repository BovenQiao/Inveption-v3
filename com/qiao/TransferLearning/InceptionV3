# -*- coding: utf-8 -*-

import glob
import os.path
import random
import numpy as np
import tensorflow as tf
from tensorflow.python.platform import gfile

# Inception-v3模型瓶颈层的节点个数
BOTTLENECK_TENSOR_SIZE = 2048
# Inception-v3模型中代表瓶颈层结果的张量名称。此处提供的模型中,这个张量名称就是'pool_3/_reshape:0',
# 可通过tensor.name获取张量名称
BOTTLENECK_TENSOR_NAME = 'pool_3/_reshape:0'

# 图像输入张量对应的名称
JPEG_DATA_TENSOR_NAME = 'DecodeJpeg/contents:0'

# 下载的谷歌训练好的Inception-v3模型文件目录
MODEL_DIR = '/Users/qiaobowen/Desktop/inception_dec_2015'
# 下载的谷歌训练好的Inception-v3模型文件名
MODEL_FILE = 'tensorflow_inception_graph.pb'

# 由于一个训练数据会被使用多次,所以将原始图像通过Inception-v3模型计算得到的特征向量保存在文件中,免去重复计算
CACHE_DIR = '/Users/qiaobowen/Desktop/tf_test_data/CACHE'
# 图片数据文件夹。此文件夹中,每一个子文件夹代表一个类别,存放着相应类比的图片
INPUT_DATA = '/Users/qiaobowen/Desktop/tf_test_data/INPUT'

# 验证的数据百分比
VALIDATION_PERCENTAGE = 10
# 测试的数据百分比
TESTING_PERCENTAGE = 10

# 神经网络参数设置
LEARNING_RATE = 0.01
STEPS = 2000
BATCH = 100


def create_image_lists(testing_percentage, validation_percentage):
    """
    从数据文件夹读取所有图片列表,并按训练、验证、测试数据分开
    :param testing_percentage:
    :param validation_percentage:
    :return:
    """
    # 得到的所有图片都存在result这个字典中,key为类别名称,value也是一个字典,存储着所有图片名称
    result = {}
    # 当前目录下所有子目录
    sub_dirs = [x[0] for x in os.walk(INPUT_DATA)]

    # 遍历根目录
    is_root_dir = True
    for sub_dir in sub_dirs:
        # 得到的第一个目录是当前目录,忽略
        if is_root_dir:
            is_root_dir = False
            continue

        # 获取当前目录下所有的有效图片文件
        file_list = []
        extensions = ['jpg', 'JPG', 'jpeg', 'JPEG']
        dir_name = os.path.basename(sub_dir)
        for extension in extensions:
            file_glob = os.path.join(INPUT_DATA, dir_name, '*.' + extension)
            file_list.extend(glob.glob(file_glob))

        if not file_list:
            continue

        # 通过目录名获取类别名
        label_name = dir_name.lower()

        # 初始化当前类别的训练数据集、测试数据集和验证数据集
        training_images, testing_images, validation_iamges = [], [], []
        for file_name in file_list:
            base_name = os.path.basename(file_name)
            # 随机将数据分到训练数据集、测试数据集和验证数据集
            chance = np.random.randint(100)
            if chance < validation_percentage:
                validation_iamges.append(base_name)
            elif chance < (testing_percentage + validation_percentage):
                testing_images.append(base_name)
            else:
                training_images.append(base_name)

        result[label_name] = {
            'dir': dir_name,
            'training': training_images,
            'testing': testing_images,
            'validation': validation_iamges
        }
    # 返回整理好的数据
    return result


def get_image_path(image_lists, image_dir, label_name, index, category):
    """
    通过类别名称、所属数据集和图片编号获取一张图片地址
    :param image_lists: 所有图片信息
    :param image_dir: 图片根目录。(存放图片的根目录和存放图片特征向量的根目录不同!!!)
    :param label_name: 类别名称
    :param index: 指定的需要获取的图片编号
    :param category: 指定需要获取的图片是在训练集、测试集还是验证集
    :return:
    """
    # 获取给定类别中所有图片信息
    label_lists = image_lists[label_name]
    # 根据所属数据集的名称获取集合中的全部图片信息
    category_list = label_lists[category]
    # TO DO index???
    mod_index = index % len(category_list)
    # 获取图片文件名
    base_name = category_list[mod_index]
    sub_dir = label_lists['dir']
    # 最终的地址为数据根目录的地址加上类别文件夹加上图片名称
    full_path = os.path.join(image_dir, sub_dir, base_name)
    return full_path


def get_bottleneck_path(image_lists, label_name, index, category):
    """
    通过类别名、所属数据集和图片编号获取经过Inception-v3模型处理之后的特征向量文件地址
    :param image_lists:
    :param label_name:
    :param index:
    :param category:
    :return:
    """
    return get_image_path(image_lists, CACHE_DIR, label_name, index, category) + '.txt'


def run_bottleneck_on_image(sezz, image_data, image_data_tensor, bottleneck_tensor):
    """
    使用加载的训练好的Inception-v3模型处理一张图片,得到这个图片的特征向量。
    此过程就是将当前图片作为输入,计算瓶颈张量的值。这个瓶颈张量的值就是这张图片新的特征向量。
    :type image_data_tensor:
    :param sezz:
    :param image_data:
    :param image_data_tensor:
    :param bottleneck_tensor:
    :return:
    """
    bottleneck_values = sezz.run(bottleneck_tensor, {image_data_tensor: image_data})
    # 经过卷积神经网络处理的结果是一个四维数组,需要将这个结果压缩成一个特征向量(一维数组)
    return np.squeeze(bottleneck_values)


def get_or_create_bottleneck(sezz, image_lists, label_name, index, category, jpeg_data_tensor, bottleneck_tensor):
    """
    获取一个经过Inception-v3模型处理之后的图片的特征向量。
    会先尝试寻找该图片的特征向量,如果没有,就计算这个特征向量,并保存到文件
    :param sezz:
    :param image_lists:
    :param label_name:
    :param index:
    :param category:
    :param jpeg_data_tensor:
    :param bottleneck_tensor:
    :return:
    """
    # 获取图片对应的特征向量文件的路径
    label_lists = image_lists[label_name]
    sub_dir = label_lists['dir']
    sub_dir_path = os.path.join(CACHE_DIR, sub_dir)
    if not os.path.exists(sub_dir_path):
        os.makedirs(sub_dir_path)
    # 先获取该特征文件
    bottleneck_path = get_bottleneck_path(image_lists, label_name, index, category)
    # 如果不存在,则通过Inception-v3模型计算特征向量,并将计算结果保存到文件
    if not os.path.exists(bottleneck_path):
        # 获取原始图片路径
        image_path = get_image_path(image_lists, INPUT_DATA, label_name, index, category)
        # 获取图片内容
        image_data = gfile.FastGFile(image_path, 'rb').read()
        # 通过Inception-v3模型计算特征向量
        bottleneck_values = run_bottleneck_on_image(sezz, image_data, jpeg_data_tensor, bottleneck_tensor)
        # 将计算得到的特征向量存入文件
        bottleneck_string = ','.join(str(x) for x in bottleneck_values)
        with open(bottleneck_path, 'w') as bottleneck_file:
            bottleneck_file.write(bottleneck_string)
    else:
        # 直接从文件获取图片对应的特征向量
        with open(bottleneck_path, 'r') as bottleneck_file:
            bottleneck_string = bottleneck_file.read()
        bottleneck_values = [float(x) for x in bottleneck_string.split(',')]
    # 返回得到的特征向量
    return bottleneck_values


def get_random_cached_bottlenecks(sezz, n_classes, image_lists, how_many, category,
                                  jpeg_data_tensor, bottleneck_tensor):
    """
    随机获取一个batch的图片作为训练数据
    :param sezz:
    :param n_classes:
    :param image_lists:
    :param how_many:
    :param category:
    :param jpeg_data_tensor:
    :param bottleneck_tensor:
    :return:
    """
    bottlenecks, ground_truths = [], []
    for _ in range(how_many):
        # 随机一个类别和图片的编号加入当前的训练数据
        label_index = random.randrange(n_classes)
        label_name = list(image_lists.keys())[label_index]
        image_index = random.randrange(65536)  # 256 * 256
        bottleneck = get_or_create_bottleneck(sezz, image_lists, label_name, image_index,
                                              category, jpeg_data_tensor, bottleneck_tensor)
        ground_truth = np.zeros(n_classes, dtype=np.float32)
        ground_truth[label_index] = 1.0
        bottlenecks.append(bottleneck)
        ground_truths.append(ground_truth)

    return bottlenecks, ground_truths


def get_test_bottlenecks(sezz, image_lists, n_classes, jpeg_data_tensor, bottleneck_tensor):
    """
    获取全部的测试数据,并计算正确率
    :param sezz:
    :param image_lists:
    :param n_classes:
    :param jpeg_data_tensor:
    :param bottleneck_tensor:
    :return:
    """
    bottlenecks, ground_truths = [], []
    label_name_list = list(image_lists.keys())
    for label_index, label_name in enumerate(label_name_list):
        category = 'testing'
        for index, unused_base_name in enumerate(image_lists[label_name][category]):
            bottleneck = get_or_create_bottleneck(sezz, image_lists, label_name, index, category,
                                                  jpeg_data_tensor, bottleneck_tensor)
            ground_truth = np.zeros(n_classes, dtype=np.float32)
            ground_truth[label_index] = 1.0
            bottlenecks.append(bottleneck)
            ground_truths.append(ground_truth)

    return bottlenecks, ground_truths


def train_main():
    """
    主函数
    :param :
    :return:
    """
    # 读取所有图片
    image_lists = create_image_lists(TESTING_PERCENTAGE, VALIDATION_PERCENTAGE)

    n_classes = len(image_lists)

    # 读取已经训练好的Inception-v3模型
    with gfile.FastGFile(os.path.join(MODEL_DIR, MODEL_FILE), 'rb') as f:
        graph_def = tf.GraphDef()
        graph_def.ParseFromString(f.read())
    # 加载读取的Inception-v3模型,并返回数据输入所对应的张量以及计算瓶颈层结果所对应的张量
    bottleneck_tensor, jpeg_data_tensor = \
        tf.import_graph_def(graph_def, return_elements=[BOTTLENECK_TENSOR_NAME, JPEG_DATA_TENSOR_NAME])

    # 定义新的神经网络输入,这个输入就是新的图片经过Inception-v3模型前向传播到达瓶颈层的节点取值。类似于特征提取
    bottleneck_input = tf.placeholder(tf.float32, [None, BOTTLENECK_TENSOR_SIZE], name='BottleneckInputPlaceholder')
    # 定义新的标准答案输入
    ground_truth_input = tf.placeholder(tf.float32, [None, n_classes], name='GroundTruthInput')

    # 定义一层全链接层来解决新的图片分类问题,因为训练好的Inception-v3模型已经将原始图片抽象为更加容易分类的特征向量了,
    # 所以不需要再训练那么复杂的神经网络来完成这个新的分类任务
    with tf.name_scope('final_training_ops'):
        weights = tf.Variable(tf.truncated_normal([BOTTLENECK_TENSOR_SIZE, n_classes], stddev=0.001))
        biases = tf.Variable(tf.zeros([n_classes]))
        logits = tf.matmul(bottleneck_input, weights) + biases
        final_tensor = tf.nn.softmax(logits)

    # 定义交叉熵损失函数
    cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=ground_truth_input)
    cross_entropy_mean = tf.reduce_mean(cross_entropy)
    train_step = tf.train.GradientDescentOptimizer(LEARNING_RATE).minimize(cross_entropy_mean)

    # 计算正确率
    with tf.name_scope('evaluation'):
        correct_prediction = tf.equal(tf.argmax(final_tensor, 1), tf.argmax(ground_truth_input, 1))
        evaluation_step = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

    # 获取saver进行保存模型
    saver = tf.train.Saver()

    with tf.Session() as sezz:
    
        init = tf.global_variables_initializer()
        sezz.run(init)

        # 训练过程
        for i in range(STEPS):
            # 每次获取一个batch的训练数据
            train_bottlenecks, train_ground_truth = \
                get_random_cached_bottlenecks(sezz, n_classes, image_lists,
                                              BATCH, 'training', jpeg_data_tensor, bottleneck_tensor)
            sezz.run(train_step,
                     feed_dict={bottleneck_input: train_bottlenecks, ground_truth_input: train_ground_truth})

            # 在验证数据上测试正确率,每100次输出一次信息并保存模型
            if i % 100 == 0 or i + 1 == STEPS:
                validation_bottlenecks, validation_ground_truth = get_random_cached_bottlenecks(
                    sezz, n_classes, image_lists, BATCH, 'validation', jpeg_data_tensor, bottleneck_tensor)
                validation_accuracy = sezz.run(evaluation_step, feed_dict={
                    bottleneck_input: validation_bottlenecks, ground_truth_input: validation_ground_truth})
                # 输出相关精度信息
                print 'Step %d : Validation accuracy on random sampled batch = %d examples = %.1f%%' % \
                      (i, BATCH, validation_accuracy * 100)
                # 保存模型-每100次
                saver.export_meta_graph(filename='/Users/qiaobowen/Desktop/tf_test_data/CKPT/material.pb', as_text=True)
                saver.save(sezz, '/Users/qiaobowen/Desktop/tf_test_data/CKPT/material')

        # 在测试数据上测试正确率
        test_bottlenecks, test_ground_truth = \
            get_test_bottlenecks(sezz, image_lists, n_classes, jpeg_data_tensor, bottleneck_tensor)
        test_accuracy = sezz.run(evaluation_step, feed_dict={
            bottleneck_input: test_bottlenecks, ground_truth_input: test_ground_truth})
        print 'Final test accuracy = %.1f%%' % (test_accuracy * 100)


if __name__ == '__main__':

    train_main()
    
